class AnalizadorLexico{constructor(e="",t=null){this.token=-1,this.EdoActual=0,this.EdoTransicion=0,this.CadenaSigma=e,this.Lexema="",this.PasoPorEdoAcept=!1,this.IniLexema=0,this.FinLexema=-1,this.IndiceCaracterActual=0,this.CaracterActual="",this.Pila=[],this.matrizTransicionAFD=t}getEstadoAnalizadorLexico(){return{CaracterActual:this.CaracterActual,EdoActual:this.EdoActual,EdoTransicion:this.EdoTransicion,FinLexema:this.FinLexema,IndiceCaracterActual:this.IndiceCaracterActual,IniLexema:this.IniLexema,Lexema:this.Lexema,PasoPorEdoAcept:this.PasoPorEdoAcept,token:this.token,Pila:[...this.Pila]}}setEstadoAnalizadorLexico(e){return this.CaracterActual=e.CaracterActual,this.EdoActual=e.EdoActual,this.EdoTransicion=e.EdoTransicion,this.FinLexema=e.FinLexema,this.IndiceCaracterActual=e.IndiceCaracterActual,this.IniLexema=e.IniLexema,this.Lexema=e.Lexema,this.PasoPorEdoAcept=e.PasoPorEdoAcept,this.token=e.token,this.Pila=[...e.Pila],!0}setSigma(e){this.CadenaSigma=e,this.PasoPorEdoAcept=!1,this.IniLexema=0,this.FinLexema=-1,this.IndiceCaracterActual=0,this.token=-1,this.Pila=[]}getLexema(){return this.Lexema}getIndiceCaracterActual(){return this.IndiceCaracterActual}cadenaXAnalizar(){return this.CadenaSigma.substring(this.IndiceCaracterActual)}getEstadoActual(){return this.EdoActual}getTamSigma(){return this.CadenaSigma.length}getIniLexema(){return this.IniLexema}getLongLexema(){return this.Lexema.length}yylex(){for(;;){if(this.Pila.push(this.IndiceCaracterActual),this.IndiceCaracterActual>=this.CadenaSigma.length)return this.Lexema="",SimbolosEspeciales.FIN;for(this.IniLexema=this.IndiceCaracterActual,this.EdoActual=0,this.PasoPorEdoAcept=!1,this.FinLexema=-1,this.token=-1;this.IndiceCaracterActual<this.CadenaSigma.length;){this.CaracterActual=this.CadenaSigma[this.IndiceCaracterActual];const e=this.CadenaSigma.charCodeAt(this.IndiceCaracterActual)+1;if(-1===this.matrizTransicionAFD[this.EdoActual][e]||void 0===this.matrizTransicionAFD[this.EdoActual][e])break;{this.EdoTransicion=this.matrizTransicionAFD[this.EdoActual][e];const t=257;-1!==this.matrizTransicionAFD[this.EdoTransicion][t]&&void 0!==this.matrizTransicionAFD[this.EdoTransicion][t]&&(this.PasoPorEdoAcept=!0,this.token=this.matrizTransicionAFD[this.EdoTransicion][t],this.FinLexema=this.IndiceCaracterActual),this.IndiceCaracterActual++,this.EdoActual=this.EdoTransicion}}if(!this.PasoPorEdoAcept)return this.IndiceCaracterActual=this.IniLexema+1,this.Lexema=this.CadenaSigma.substring(this.IniLexema,this.IndiceCaracterActual),this.token=SimbolosEspeciales.ERROR,this.token;if(this.Lexema=this.CadenaSigma.substring(this.IniLexema,this.FinLexema+1),this.IndiceCaracterActual=this.FinLexema+1,this.token!==SimbolosEspeciales.OMITIR)return this.token}}undoToken(){return 0!==this.Pila.length&&(this.IndiceCaracterActual=this.Pila.pop(),!0)}}const SimbolosEspeciales={FIN:0,ERROR:-2,OMITIR:1e4};async function cargarAutomataGramaticas(){if(window.gramaticaAutomata)return window.gramaticaAutomata;try{const e=await fetch("build/utils/matriz.txt");if(!e.ok)throw new Error(`Error al cargar el archivo: ${e.statusText}`);const t=parseAFDFile(await e.text());return window.gramaticaAutomata=t,t}catch(e){throw console.error("Error al cargar el autómata de gramáticas:",e),e}}function parseAFDFile(e){const t=e.split("\n").filter((e=>""!==e.trim())),i=[];for(let e=0;e<t.length;e++){const a=t[e].split(",");if(258!==a.length)throw new Error(`La línea ${e+1} no tiene 258 columnas.`);const s=a.map((e=>parseInt(e.trim())));if(s.some((e=>isNaN(e))))throw new Error(`Valores inválidos en la línea ${e+1}.`);i.push(s)}return i}async function instanciarAnalizadorLexicoGramaticas(e){try{const t=await cargarAutomataGramaticas();return new AnalizadorLexico(e,t)}catch(e){return console.error("No se pudo instanciar el analizador léxico de gramáticas:",e),null}}document.addEventListener("DOMContentLoaded",(async()=>{const e=await instanciarAnalizadorLexicoGramaticas("<G> -> <Reglas>; epsilon<Reglas> -> <Regla> <SEMICOLON> <ReglasP>;<ReglasP> -> <Regla> <SEMICOLON> <ReglasP> | <epsilon>;<Regla> -> <LadoIzq> <flecha> <LadosDerechos>;<LadoIzq> -> <SIMBOLO>;<LadosDerechos> -> <LadoDerecho> <LadosDerechosP>;<LadosDerechosP> -> <OR> <LadoDerecho> <LadosDerechosP> | <epsilon>;<LadoDerecho> -> <Simbolos>;<Simbolos> -> <SIMBOLO> <SimbolosP>;<SimbolosP> -> <SIMBOLO> <SimbolosP> | <epsilon>;");if(e){let t;for(;0!==(t=e.yylex())&&t!==SimbolosEspeciales.ERROR;)console.log("Token:",t,"Lexema:",e.getLexema());0===t?console.log("Fin de entrada."):console.error("Error léxico en:",e.getLexema())}}));class Nodo{constructor(e,t=!1){this.NombSimb=e,this.EsTerminal=t}}class ElemArreglo{constructor(){this.NombSimb="",this.Lista=[],this.EsTerminal=!1}}class Grammar{constructor(e){this.Lexic=e,this.Reglas=[],this.NumReglas=0,this.SimbNoTerm=new Set}async parse(){return await this.LlenarArreglo()}async LlenarArreglo(){if(this.G()){if(0===this.Lexic.yylex())return this.updateNodos(),!0}return!1}G(){return this.Reglas_()}Reglas_(){if(this.Regla()){if(50===this.Lexic.yylex())return this.ReglasPrime()}return!1}ReglasPrime(){let e=this.Lexic.yylex();if(0===e)return this.Lexic.undoToken(),!0;if(40===e){if(this.Lexic.undoToken(),this.Regla()){return 50===this.Lexic.yylex()&&this.ReglasPrime()}return!1}return this.Lexic.undoToken(),!0}Regla(){let e={value:""};if(this.LadoIzq(e)){if(20===this.Lexic.yylex())return this.LadosDerechos(e.value)}return!1}LadoIzq(e){if(40===this.Lexic.yylex()){let t=this.Lexic.getLexema();return t.startsWith("<")&&t.endsWith(">")&&(t=t.substring(1,t.length-1)),e.value=t,this.SimbNoTerm.add(t),!0}return!1}LadosDerechos(e){let t=[];if(this.LadoDerecho(t)){let i=new ElemArreglo;return i.NombSimb=e,i.Lista=t,i.EsTerminal=!1,this.Reglas[this.NumReglas++]=i,this.LadosDerechosPrime(e)}return!1}LadosDerechosPrime(e){if(30===this.Lexic.yylex()){let t=this.Lexic.yylex();if(40===t){this.Lexic.undoToken();let t=[];if(this.LadoDerecho(t)){let i=new ElemArreglo;return i.NombSimb=e,i.Lista=t,i.EsTerminal=!1,this.Reglas[this.NumReglas++]=i,this.LadosDerechosPrime(e)}return!1}if(10===t){let t=[],i=new Nodo("ε",!0);t.push(i);let a=new ElemArreglo;return a.NombSimb=e,a.Lista=t,a.EsTerminal=!1,this.Reglas[this.NumReglas++]=a,this.LadosDerechosPrime(e)}return!1}return this.Lexic.undoToken(),!0}LadoDerecho(e){return this.Simbolos(e)}Simbolos(e){if(40===this.Lexic.yylex()){let t=this.Lexic.getLexema();t.startsWith("<")&&t.endsWith(">")&&(t=t.substring(1,t.length-1));let i=new Nodo(t,!1);return!!this.SimbolosPrime(e)&&(e.push(i),!0)}return this.Lexic.undoToken(),!0}SimbolosPrime(e){if(40===this.Lexic.yylex()){let t=this.Lexic.getLexema();t.startsWith("<")&&t.endsWith(">")&&(t=t.substring(1,t.length-1));let i=new Nodo(t,!1);return!!this.SimbolosPrime(e)&&(e.push(i),!0)}return this.Lexic.undoToken(),!0}updateNodos(){for(let e=0;e<this.NumReglas;e++)for(let t of this.Reglas[e].Lista)this.SimbNoTerm.has(t.NombSimb)?t.EsTerminal=!1:t.EsTerminal=!0}}document.addEventListener("DOMContentLoaded",(async()=>{const e=await instanciarAnalizadorLexicoGramaticas("<G> -> <Reglas>;<Reglas> -> <Regla> <SEMICOLON> <ReglasP>;<ReglasP> -> <Regla> <SEMICOLON> <ReglasP> | <hola>;<Regla> -> <LadoIzq> <flecha> <LadosDerechos>;<LadoIzq> -> <SIMBOLO>;<LadosDerechos> -> <LadoDerecho> <LadosDerechosP>;<LadosDerechosP> -> <OR> <LadoDerecho> <LadosDerechosP> | <hola>;<LadoDerecho> -> <Simbolos>;<Simbolos> -> <SIMBOLO> <SimbolosP>;<SimbolosP> -> <SIMBOLO> <SimbolosP> | epsilon;");if(e){const t=new Grammar(e);if(await t.parse()){console.log("Gramática analizada correctamente."),console.log("Número de reglas:",t.NumReglas);for(let e=0;e<t.NumReglas;e++){const i=t.Reglas[e],a=i.Lista.map((e=>e.NombSimb+(e.EsTerminal?"(T)":"(NT)"))).join(" ");console.log(`${i.NombSimb} -> ${a}`)}}else console.error("Error al analizar la gramática.")}else console.error("No se pudo instanciar el analizador léxico.")}));
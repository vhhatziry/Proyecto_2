import{instanciarAnalizadorLexicoGramaticas,parseAFDFile}from"./parser_utils.js";import{Grammar}from"./grammar.js";import{AnalizadorLexico,SimbolosEspeciales}from"./analizador_lexico.js";import{leerArchivo}from"./file_utils.js";import{agregarFilaLexResults,limpiarTablasSimbolos}from"./dom_utils.js";import{generarTablaLL1}from"./sintactic_ll1.js";const appState={userAutomata:null,userLexAnalyzer:null,currentGrammar:null,grammarUpdateTimeout:null,currentMode:"lex",ll1Table:null};async function actualizarGrammarDesdeTexto(){const e=document.getElementById("grammarText").value.trim();if(""===e)return void limpiarTablasSimbolos();const a=await instanciarAnalizadorLexicoGramaticas(e);if(!a)return void limpiarTablasSimbolos();const t=new Grammar(a);await t.parse()?actualizarTablasDeSimbolos(t):limpiarTablasSimbolos()}function actualizarTablasDeSimbolos(e){e.updateNodos(),appState.currentGrammar=e;const a=document.getElementById("noterm"),t=document.getElementById("term");a.innerHTML="",t.innerHTML="";const r=new Set(e.SimbNoTerm),o=new Set;for(let a=0;a<e.NumReglas;a++)for(let t of e.Reglas[a].Lista)t.EsTerminal&&"ε"!==t.NombSimb&&o.add(t.NombSimb);r.forEach((e=>{a.insertRow().insertCell().textContent=e})),o.forEach((e=>{const a=t.insertRow();a.insertCell().textContent=e;const r=a.insertCell(),o=document.createElement("input");o.type="text",o.size=5,o.placeholder="Token",appState.currentGrammar.TerminalesTokens[e]&&(o.value=appState.currentGrammar.TerminalesTokens[e]),r.appendChild(o)}))}function obtenerTerminalesSinToken(e){const a=new Set;for(let t=0;t<e.NumReglas;t++)for(let r of e.Reglas[t].Lista)r.EsTerminal&&"ε"!==r.NombSimb&&a.add(r.NombSimb);const t=[];for(let r of a)void 0===e.TerminalesTokens[r]&&t.push(r);return t}function mostrarTablaLL1EnInterfaz(e){const a=document.querySelector(".table-results__table");a.innerHTML="";const t=Object.keys(e),r=new Set;for(let a of t)for(let t of Object.keys(e[a]))r.add(t);const o=Array.from(r),n=a.insertRow();n.insertCell().textContent="NT/TOK";for(let e of o){n.insertCell().textContent=e}for(let r of t){const t=a.insertRow();t.insertCell().textContent=r;for(let a of o){const o=t.insertCell();void 0!==e[r][a]?o.textContent=e[r][a]:o.textContent=""}}}document.addEventListener("DOMContentLoaded",(async()=>{const e=await instanciarAnalizadorLexicoGramaticas("<G> -> <Reglas>; epsilon<Reglas> -> <Regla> <SEMICOLON> <ReglasP>;<ReglasP> -> <Regla> <SEMICOLON> <ReglasP> | <epsilon>;<Regla> -> <LadoIzq> <flecha> <LadosDerechos>;<LadoIzq> -> <SIMBOLO>;<LadosDerechos> -> <LadoDerecho> <LadosDerechosP>;<LadosDerechosP> -> <OR> <LadoDerecho> <LadosDerechosP> | <epsilon>;<LadoDerecho> -> <Simbolos>;<Simbolos> -> <SIMBOLO> <SimbolosP>;<SimbolosP> -> <SIMBOLO> <SimbolosP> | <epsilon>;");if(e){let a;for(;0!==(a=e.yylex())&&a!==SimbolosEspeciales.ERROR;)console.log("Token:",a,"Lexema:",e.getLexema());0===a?console.log("Fin de entrada (primer análisis)."):console.error("Error léxico en:",e.getLexema())}else console.error("No se pudo instanciar el analizador léxico (primer análisis).");const a=await instanciarAnalizadorLexicoGramaticas("<G> -> <Reglas>;<Reglas> -> <Regla> <SEMICOLON> <ReglasP>;<ReglasP> -> <Regla> <SEMICOLON> <ReglasP> | epsilon;<Regla> -> <LadoIzq> <flecha> <LadosDerechos>;<LadoIzq> -> <SIMBOLO>;<LadosDerechos> -> <LadoDerecho> <LadosDerechosP>;<LadosDerechosP> -> <OR> <LadoDerecho> <LadosDerechosP> | epsilon;<LadoDerecho> -> <Simbolos>;<Simbolos> -> <SIMBOLO> <SimbolosP>;<SimbolosP> -> <SIMBOLO> <SimbolosP> | epsilon;");if(a){const e=new Grammar(a),t=await e.parse();if(e.removeLeftRecursion(),t){console.log("Gramática analizada correctamente (segunda prueba)."),console.log("Número de reglas:",e.NumReglas);for(let a=0;a<e.NumReglas;a++){const t=e.Reglas[a],r=t.Lista.map((e=>e.NombSimb+(e.EsTerminal?"(T)":"(NT)"))).join(" ");console.log(`${t.NombSimb} -> ${r}`)}}else console.error("Error al analizar la gramática (segunda prueba).")}else console.error("No se pudo instanciar el analizador léxico (segunda prueba).");const t=document.getElementById("matrizInput"),r=document.getElementById("cargarAFD"),o=document.getElementById("testLex"),n=document.getElementById("lexResults"),l=document.getElementById("grammarText"),s=document.getElementById("asignarTokens"),i=document.getElementById("crearTablaLL1"),m=document.getElementById("analizlex"),c=document.getElementById("analizsintact"),d=document.getElementById("lex"),u=document.getElementById("sintact");o.disabled=!0,d.style.display="block",u.style.display="none",o.textContent="Analizar Léxicamente",appState.currentMode="lex",m.addEventListener("change",(()=>{m.checked&&(d.style.display="block",u.style.display="none",o.textContent="Analizar Léxicamente",appState.currentMode="lex")})),c.addEventListener("change",(()=>{c.checked&&(d.style.display="none",u.style.display="block",o.textContent="Analizar Sintácticamente",appState.currentMode="sintact")})),r.addEventListener("click",(()=>{t.click()})),t.addEventListener("change",(async e=>{const a=e.target.files[0];if(a)try{const e=await leerArchivo(a);appState.userAutomata=parseAFDFile(e),appState.userLexAnalyzer=new AnalizadorLexico("",appState.userAutomata),console.log("Autómata cargado exitosamente."),o.disabled=!1}catch(e){console.error("Error al cargar el autómata:",e),alert("Error al cargar el autómata. Ver consola para detalles.")}})),o.addEventListener("click",(()=>{if(!appState.userLexAnalyzer)return void alert("Primero carga el AFD.");n.innerHTML="";const e=document.getElementById("sigma").value.trim();let a;for(appState.userLexAnalyzer.setSigma(e);0!==(a=appState.userLexAnalyzer.yylex())&&a!==SimbolosEspeciales.ERROR;){const e=appState.userLexAnalyzer.getLexema();agregarFilaLexResults(n,e,a)}0===a?(console.log("Fin de entrada (análisis usuario)."),agregarFilaLexResults(n,"FIN","0")):a===SimbolosEspeciales.ERROR&&agregarFilaLexResults(n,appState.userLexAnalyzer.getLexema(),"ERROR")})),l.addEventListener("input",(()=>{appState.grammarUpdateTimeout&&clearTimeout(appState.grammarUpdateTimeout),appState.grammarUpdateTimeout=setTimeout((()=>{actualizarGrammarDesdeTexto()}),500)})),s.addEventListener("click",(()=>{if(!appState.currentGrammar)return void console.warn("No hay una gramática parseada actualmente.");const e=document.getElementById("term");for(let a=0;a<e.rows.length;a++){const t=e.rows[a],r=t.cells[0].textContent,o=t.cells[1].querySelector('input[type="text"]').value.trim();""===o||isNaN(o)?delete appState.currentGrammar.TerminalesTokens[r]:appState.currentGrammar.TerminalesTokens[r]=parseInt(o,10)}console.log("Asignaciones de tokens a terminales:");for(let[e,a]of Object.entries(appState.currentGrammar.TerminalesTokens))console.log(e,"->",a)})),i.addEventListener("click",(()=>{if(!appState.currentGrammar)return void alert("No hay una gramática parseada. Por favor, escribe una gramática válida.");const e=obtenerTerminalesSinToken(appState.currentGrammar);e.length>0?alert("Los siguientes terminales no tienen token asignado: "+e.join(", ")):appState.userAutomata?(appState.currentGrammar.removeLeftRecursion(),appState.ll1Table=generarTablaLL1(appState.currentGrammar),console.log("Tabla LL1 generada:"),console.log(appState.ll1Table),mostrarTablaLL1EnInterfaz(appState.ll1Table),alert("Tabla LL1 generada con éxito. Revisa la sección de resultados para verla.")):alert("No se ha cargado el archivo de la matriz de transición AFD.")}))}));
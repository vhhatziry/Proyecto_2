function generarTablaLL1(e){e.removeLeftRecursion();const o=calcularFIRST(e),t=calcularFOLLOW(e,o),n={};for(let o of e.SimbNoTerm)n[o]={};for(let r=0;r<e.NumReglas;r++){const a=e.Reglas[r],l=a.NombSimb,i=FIRSTdeSecuencia(a.Lista,o),c=i.has("ε");for(let e of i)if("ε"!==e){const o=e;n[l][o]&&n[l][o]!==r&&console.warn(`Conflicto en LL(1): ${l}, terminal ${o}`),n[l][o]=r}if(c)for(let e of t[l]){const o="FIN"===e?"FIN":e;n[l][o]&&n[l][o]!==r&&console.warn(`Conflicto en LL(1): ${l}, terminal ${o}`),n[l][o]=r}}return n}function calcularFIRST(e){const o={};for(let t of e.SimbNoTerm)o[t]=new Set;let t=!0;for(;t;){t=!1;for(let n=0;n<e.NumReglas;n++){const r=e.Reglas[n],a=r.NombSimb,l=r.Lista,i=o[a].size,c=FIRSTdeSecuencia(l,o);for(let e of c)o[a].add(e);o[a].size>i&&(t=!0)}}return o}function calcularFOLLOW(e,o){const t={};for(let o of e.SimbNoTerm)t[o]=new Set;t[e.Reglas[0].NombSimb].add("FIN");let n=!0;for(;n;){n=!1;for(let r=0;r<e.NumReglas;r++){const a=e.Reglas[r],l=a.NombSimb,i=a.Lista;for(let e=0;e<i.length;e++){const r=i[e];if(!r.EsTerminal){const a=i.slice(e+1),c=FIRSTdeSecuencia(a,o),f=t[r.NombSimb].size;for(let e of c)"ε"!==e&&t[r.NombSimb].add(e);if(c.has("ε")||0===a.length)for(let e of t[l])t[r.NombSimb].add(e);t[r.NombSimb].size>f&&(n=!0)}}}}return t}function FIRSTdeSecuencia(e,o){const t=new Set;if(0===e.length)return t.add("ε"),t;for(let n=0;n<e.length;n++){const r=e[n];if(r.EsTerminal){t.add(r.NombSimb);break}{const a=o[r.NombSimb];for(let e of a)t.add(e);if(!a.has("ε"))break;n===e.length-1&&t.add("ε")}}return t}export{generarTablaLL1};